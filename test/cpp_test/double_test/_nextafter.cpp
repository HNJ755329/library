#include <bits/stdc++.h>
using namespace std;

int main()
{
    cout << fixed << setprecision(40);
    cout << "double\n";
    double r;
    for (int i = 0; i < 18; i++)
    {
        r = pow(10, i);
        r = nextafter(r, INFINITY);
        cout << i << " " << r << endl;
    }

    cout << "long double\n";
    long double lr;
    for (int i = 0; i < 18; i++)
    {
        lr = pow(10, i);
        lr = nextafter(lr, INFINITY);
        cout << i << " " << lr << endl;
    }
    // nextafter(r,X) Returns the next representable value of from in the direction of to.
    // rのX方向の次の数（精度の範囲内で）
    // double
    // 0 1.0000000000000002220446049250313080847263
    // 1 10.0000000000000017763568394002504646778107
    // 2 100.0000000000000142108547152020037174224854
    // 3 1000.0000000000001136868377216160297393798828
    // 4 10000.0000000000018189894035458564758300781250
    // 5 100000.0000000000145519152283668518066406250000
    // 6 1000000.0000000001164153218269348144531250000000
    // 7 10000000.0000000018626451492309570312500000000000
    // 8 100000000.0000000149011611938476562500000000000000
    // 9 1000000000.0000001192092895507812500000000000000000
    // 10 10000000000.0000019073486328125000000000000000000000
    // 11 100000000000.0000152587890625000000000000000000000000
    // 12 1000000000000.0001220703125000000000000000000000000000
    // 13 10000000000000.0019531250000000000000000000000000000000
    // 14 100000000000000.0156250000000000000000000000000000000000
    // 15 1000000000000000.1250000000000000000000000000000000000000
    // 16 10000000000000002.0000000000000000000000000000000000000000
    // 17 100000000000000016.0000000000000000000000000000000000000000
    // doubleだと17桁ぐらいで整数を正確に表せなくなる。
    // long double
    // 0 1.0000000000000000001084202172485504434007
    // 1 10.0000000000000000008673617379884035472060
    // 2 100.0000000000000000069388939039072283776477
    // 3 1000.0000000000000000555111512312578270211816
    // 4 10000.0000000000000008881784197001252323389053
    // 5 100000.0000000000000071054273576010018587112427
    // 6 1000000.0000000000000568434188608080148696899414
    // 7 10000000.0000000000009094947017729282379150390625
    // 8 100000000.0000000000072759576141834259033203125000
    // 9 1000000000.0000000000582076609134674072265625000000
    // 10 10000000000.0000000009313225746154785156250000000000
    // 11 100000000000.0000000074505805969238281250000000000000
    // 12 1000000000000.0000000596046447753906250000000000000000
    // 13 10000000000000.0000009536743164062500000000000000000000
    // 14 100000000000000.0000076293945312500000000000000000000000
    // 15 1000000000000000.0000610351562500000000000000000000000000
    // 16 10000000000000000.0009765625000000000000000000000000000000
    // 17 100000000000000000.0078125000000000000000000000000000000000
    for (int i = 0; i < 18; i++)
    {
        r = pow(10, i);
        r += 1;
        cout << i << " " << r << endl;
    }
    // 0 2.0000000000000000000000000000000000000000
    // 1 11.0000000000000000000000000000000000000000
    // 2 101.0000000000000000000000000000000000000000
    // 3 1001.0000000000000000000000000000000000000000
    // 4 10001.0000000000000000000000000000000000000000
    // 5 100001.0000000000000000000000000000000000000000
    // 6 1000001.0000000000000000000000000000000000000000
    // 7 10000001.0000000000000000000000000000000000000000
    // 8 100000001.0000000000000000000000000000000000000000
    // 9 1000000001.0000000000000000000000000000000000000000
    // 10 10000000001.0000000000000000000000000000000000000000
    // 11 100000000001.0000000000000000000000000000000000000000
    // 12 1000000000001.0000000000000000000000000000000000000000
    // 13 10000000000001.0000000000000000000000000000000000000000
    // 14 100000000000001.0000000000000000000000000000000000000000
    // 15 1000000000000001.0000000000000000000000000000000000000000
    // 16 10000000000000000.0000000000000000000000000000000000000000
    // 17 100000000000000000.0000000000000000000000000000000000000000
}